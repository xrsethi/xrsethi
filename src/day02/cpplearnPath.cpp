#include <iostream>
using namespace std;

/*
*	c++ learning Path
*	1. 先设计类，然后在类里面求解问题
*	2. 管理类是个很重要的方向
*/

/*
*	1.c++ 类的封装:类是抽象的，对象是具体的，成员变量、成员函数也有了。
*	2.面向对象的三大概念：封装、继承、多态
*			封装概念：是面向对象程序设计最基本的特性。把数据和函数合成一个整体。
*			封装本质：也就是把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让
*					  可信的类或者对象操作，对不可信的进行隐藏。
*	3.类的内部和类的外部：看似不重要，其实是有需要注意的地方，class{类的内部} 外面通过调此类的成员调用：类的外部
*	4.类的成员变量和函数实现访问控制：
*	class MyCircle
*	{
*		public:		修饰的成员变量和函数，可以在类的内部和类的外部访问	
*		protected:	修饰的成员变量和函数，只能在类的内部被访问，不能在类的外部访问，
					****但是有个特例：用在继承里面，可以在子类中使用：暂不需要掌握
		private:	修饰的成员变量和函数，只能在类的内部被访问，不能在类的外部访问
					(没有权限的成员默认情况是私有成员)
	}
*/

/*
*	day02_12:类的声明和类的实现分开：很简单的，如果把函数定义写在类内部，c++会自动做成内联函数
*			 所以一般类内部只写函数声明，
*	注释：#pragma noce 只包含一次
*/
class MyCircle
{
public:
	MyCircle();
	~MyCircle();

private:

};

MyCircle::MyCircle()
{
}

MyCircle::~MyCircle()
{
}
int main()
{
	
}


/*
*	struct 和 class 区别：可以实现和类一样的功能，
*	1.用struct关键字定义的类，没有权限默认属性是public
*	
*/

/*
*	day02_13:面向过程向面向对象的思想转变
*	
*/

